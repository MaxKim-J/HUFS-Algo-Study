Tree
1. 이진트리: 모든 노드의 자식이 2개를 넘지 않는 트리
2. 힙: 특별한 성질을 갖고 있는 이진 트리 중 하나
*힙의 특별한 성질
1) 모양 
1. 마지막 레벨을 제외한 각 레벨의 노드는 모두 채워져 있어야 한다
2. 마지막 레벨에선 노드들이 왼쪽부터 채워져야 한다
2) 힙의 성질
루트 노드를 제외한 모든 노드 에 저장된 값(key)은 자신의 부모
노드의 값보다 크면 안된다

class Heap:
    def __init__(self, L=[]):
	    self.A = L
    def __str__(self):
	    return str(self.A)

    def heapify_down(self, k, n): 
//A[k] 의 자손 노드들은 모두 힙 성질을 만족한다고 할 때, A[k] 값을 아래로 내려가면서 힙 성질을 만족하는 위치로 이동시키는 함수.
        while 2*k+1<n:
            L,R=2*k+1,2*k+2
            if self.A[L]>self.A[k]:
                m=L
            else:
                m=k
            if R<n and self.A[R]>self.A[m]:
                m=R
            if m!=k:
                self.A[k],self.A[m]=self.A[m],self.A[k]
                k=m
            else:
                break
		
    def make_heap(self):
        n=len(self.A)
        for k in range(n-1,-1,-1):
            self.heapify_down(k,n)
                
		
    def heap_sort(self):
        n=len(self.A)
        for k in range(len(self.A)-1,-1,-1):
            self.A[0],self.A[k]=self.A[k],self.A[0]
            n=n-1
            self.heapify_down(0,n)

xiv. 연산 및 수행시간 정리 (n개의 값을 저장한 리스트와 힙에 대해)
1. heapify_up, heapify_down: O(log n)
2. make_heap = n times x heapify_down = O(n log n) → O(n)
3. insert = 1 x heapify_down: O(log n)
4. delete_max = 1 x heapify_down: O(log n)
5. heap sort = make_heap + n x heapify up = O(n log n)

*이진트리 
class Node:
def _init__(self,key=None,parent=None,left=None,right=None):
self.key = key
# 필요하면 추가 정보 - 예: self.value = value
# 필요하면 추가 정보 - 예: self.height = 0
self.parent = parent
self.left = left
self.right = right
def _str__(self):
return str(self.key)

*이진트리의 순회
1. preorder: MLR
2. inorder: LMR
3. postorder: LRM