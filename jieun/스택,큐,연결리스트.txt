Stack
-가장 최근에 저장된 값 다음에 저장
-나갈 때는 가장 최근에 저장된 값이 먼저 나감
-LIFO 새치기!
*코드*
class Stack:
1.def _init__(self):
self.items = [] # 데이터 저장을 위한 리스트 준비
2. def push(self, val):
self.items.append(val)
3. def pop(self):
try: # pop 할 아이템이 없으면
   return self.items.pop()
except IndexError: # indexError 발생
   print("Stack is empty")
4. def top(self):
try:
   return self.items[-1]
except IndexError:
   print("Stack is empty")
5. def _len__(self): # len() 로 호출하면 stack 의 item 수 반환
return len(self.items)
6. def isEmpty(self):
return self.__len__() == 0


*infix->postfix
x. Pseudo 코드:
1. 괄호와 연산자를 저장하기 위한 스택 opstack = Stack() 준비
2. Postfix 수식(결과)을 저장하기 위한 리스트 outstack = [] 준비
3. 리스트 exp 에는 항과 연산자가 infix 수식 형태로 입력되어 있음
for each token in exp :
 if token == operand: outstack .append(token)
 if token == '(' : opstack .push(token)
 if token == ')' :
opstack 에 저장된 연산자를 ( 를 만날때까지 계속 pop 한 후 outstack 에 append 함
 if token in '+-*/':
a. opstack 에 있는 자신보다 우선순위가 높거나 같은 연산자는
차례로 모두 pop 한 후 outstack 에 append 함
b. opstack. push(token)
10. opstack 에 남아 있는 연산자를 모두 pop하고 outstack에 append


*실제 코드*
class Stack:
    def __init__(self):
        self.items = []

    def push(self, val):
        self.items.append(val)

    def pop(self):
        try:
            return self.items.pop()
        except IndexError:
            print("Stack is empty")

    def top(self):
        try:
            return self.items[-1]
        except IndexError:
            print("Stack is empty")

    def __len__(self):
        return len(self.items)

    def isEmpty(self):
        return self.__len__() == 0

def infix_to_postfix(infix):
    
    opstack = Stack()
    outstack = []
    token_list = infix.split(' ')
		
		# 연산자의 우선순위 설정
    prec = {}
    prec['('] = 0
    prec['+'] = 1
    prec['-'] = 1
    prec['*'] = 2
    prec['/'] = 2
    prec['^'] = 3

    for token in token_list:
        if token == '(':
            opstack.push(token)
        elif token == ')':
            while opstack.items!=[] and opstack.items[-1]!='(':
                lasttoken=opstack.pop()
                outstack.append(lasttoken)
            opstack.pop()
        elif token in '+-/*^':
            while opstack.items!=[] and prec[opstack.items[-1]]>=prec[token]:
                lasttoken=opstack.pop()
                outstack.append(lasttoken)
            opstack.push(token)
        else: # operand일 때
            outstack.append(token)

    while opstack:
        lasttoken=opstack.pop()
        outstack.append(lasttoken)
        
    return " ".join(outstack)

	
infix_expr = input()
postfix_expr = infix_to_postfix(infix_expr)
print(postfix_expr)
Queue
-가장 최근에 저장된 값 다음에 저장
-가장 오래전에 저장된 값부터 나감
-FIFO 선착순
*코드*
class Queue :
1. def _init__ ( self ):
self . items = [] # 데이터 저장을 위한 리스트 준비
self . front_index = 0 # 다음 dequeue될 값의 인덱스 기억
2. def enqueue ( self , val ):
self . items . append ( val )
3. def dequeue ( self ):
if len ( self . items ) == 0 or \
   self . front_index == len ( self . items ):
   print ( "Queue is empty" )
else :
   x = self . items [ self . front_index ]
   self . front_index += 1
   return x

-연결리스트
1. 한방향 연결리스트
-앞에 노드를 head노드라고 함
-가장 뒤의 노드의 next 노드는 none
=next가 none이면 마지막 노드임을 의미
*코드*
---
2.양방향 연결리스트
-한방향연결리스트의 단점(이전 노드를 몰라서 탐색시간오래걸림)을 보완하기 위한 방법
-원형리스트를 만듦
-첫노드(head)는 항상 dummy 노드 
-마지막 노드의 next 노드는 head

*코드*
class Node:
   def __init__(self,key=None, value=None):
      self.key = key
      self.value=value
      self.next = self.prev = self
      
class DoublyLinkedList:
   def __init__(self):
      self.head = Node(None)   
   def splice(self, a, b, x):
        if a ==None or b == None or x == None:
         return
        ap = a.prev
        bn = b.next
        ap.next =bn
        bn.prev =ap
              
        xn=x.next
        xn.prev =b
        b.next= xn
        a.prev = x
        x.next = a
              
   def moveAfter(self,b,a):
      self.splice(b,b,a)
   def moveBefore(self,a,x):
      self.splice(a,a,x.prev)
   def insertAfter(self,x,key):
      self.moveAfter(Node(key),x)
   def insertBefore(self,x,key):
      self.moveBefore(Node(key),x)
   def pushFront(self,key):
      self.insertAfter(self.head,key)
   def pushBack(self,key):
      self.insertBefore(self.head,key)
   def deleteNode(self,x):
      if x==None or x==self.head:
         return
      x.prev.next, x.next.prev = x.next, x.prev    
   def popFront(self):
      if self.head.next == self.head:
         return None
      key= self.head.next.key
      self.deleteNode(self.head.next)
      return key 
   def popBack(self):
      if self.head.prev == self.head:
         return None
      key= self.head.prev.key
      self.deleteNode(self.head.prev)
      return key
   def search(self,key):
      v=self.head.next
      while v !=self.head:
         if v.key==key:
            return v
         v=v.next
      return None    
   def first(self):
      if self.head.next==self.head:
         return None
      key=self.head.next.key
      return key
   def last(self):
      if self.head.next==self.head:
         return None
      key=self.head.prev.key
      return key
   def isEmpty(self):
      if self.head.next==self.head and self.head.prev==self.head:
         return True
   def printList(self):
        v=self.head.next
        print("h -> ", end="")
        while v != self.head:
            print(str(v.key)+" -> ",end="")
            v = v.next
        print("h")




