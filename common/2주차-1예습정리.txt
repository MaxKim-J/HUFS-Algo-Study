※7장 반복문

p6 → for (i = 0; i < 5; i++)
 	printf("Hello World!\n");형태

반복문 → while루프, for루프

while루프:조건식이 참이면 문장 실행
	while ( 조건식 ) // 반복 여부를 결정하는 조건식 
		반복-문장;

if문 vs while문 : 
	if문 → 조건이 만족하면 한번만 실행
	while문 → 조건이 만족하면 반복 실행

for문 → p26

do while문:
	do 반복-문장; // 반복 실행하는 문장 
	while ( 조건식 );

while문 ↔ for문 변경가능 (p32)
p34 → 변수의 선언과 초기화 동시에 가능함
다양한 증감수식 형태 → 35p,36p 참고

중첩 반복문: 반복문안에 반복문이 위치


※8장 함수

인수와 매개변수
인수 → 함수를 호출할때 ()안에 쓰는 값(실 매개변수, 실제로 사용된다고해서)
매개변수 → 함수 생성시,()쓰는 매개변수(형식 매개변수, 형식적으로 지정되고 실매개변수로 사용)

반환값 : return 으로 반환되는 값/ 종료하는 기능
	반환값이 없을시 void를 사용해주어야함


함수 → 2가지( 사용자 정의 함수,라이브러리 함수)
호출자 : 함수를 호출하는 모듈
피호출자 : 호출되는 함수
함수의 구조 → p12

함수의 원형 

위에서 아래로 함수를 읽어나가지만 호출자가 아직 읽지않은 함수를 호출시에 
원형을 ex)int Sum(int value1, int value2) 선언해주어 아직 순서가 오지 않더라도
함수 원형의 명령에 따라 먼저 읽고 오는 것, 매개변수 이름 생략가능

라이브러리 함수

C언어에서 제공하는 함수를 라이브러리 함수라고 이야기함
난수 함수 → ppt참조

※함수와 변수

지역변수 전역변수
전역변수 → 프로그램 전체에서 기억되고 사용되는 변수,함수 외부에서 정의
지역변수 → 함수내에서 기억되고 함수의 종료와 함께 소멸되는 변수,함수 내부에서 정의
이름이 같더라도 서로 다른 함수에서 사용된 지역변수라면 사용이 가능
매개변수도 지역변수처럼 사용
전역변수의 잘못된 사용  → 전역변수는 변경된 값이 계속 기억되기때문에
			초기화 된다고 생각하고 사용하면 잘못사용하게됨
같은 이름의 전역변수와 지역변수  → 전역변수 선언후 함수안에 전역변수를 가져와 사용할수있음
				하지만 지역변수와 전역변수와 이름이 같다면 이름을 달리 선언해줘야함

auto함수 → 'auto 변수'를 선언하면 블록안에서는 생존이 가능한 변수를 만들수있음


int main(void) {

    int a = 1;

     while(a > 0) {
           printf("%d\n", a);
     }



     return 0;
} 
-----------------------------------------
int main(void) {


    int a = 1;
    while(1) { // 항상 참

        printf("%d\n", a);
    }
    return 0;
}

++++++++++++++++++++++++++++++++
int main(void) {

    volatile int a = 1;

     while(a > 0) {
           printf("%d\n", a);
     }



     return 0;
}